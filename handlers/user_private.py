import asyncio

from aiogram import Bot, Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from filters.chat_types import ChatTypeFilter
from keyboard.reply import start_dialog, end_dialog
from common.states import Communication

user_private = Router()
user_private.message.filter(ChatTypeFilter(['private']))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ {user_id: developer_message_id}
active_dialogs = {}

@user_private.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ",
        reply_markup=start_dialog
        )


@user_private.message(F.text.lower() == "üü¢ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")
async def cmd_start_dialog(message: types.Message, state: FSMContext):

    user_id = message.from_user.id
    if user_id in active_dialogs:
        await message.answer(
            "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–∏—Å–∞—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–≥–æ.",
            reply_markup=end_dialog # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
        )

        await state.set_state(Communication.chatting)
        return

    await state.set_state(Communication.waiting_for_message)
    await message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥, –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–º—ë—Ç–µ \"üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\".",
        reply_markup=end_dialog
    )


@user_private.message(Communication.waiting_for_message, F.content_type == types.ContentType.TEXT)
async def handle_first_user_message(message: types.Message, state: FSMContext, bot: Bot):
    workflow_data = bot.workflow_data
    dev_chat_id = workflow_data.get('dev_chat_id')

    user = message.from_user

    try:
        await bot.send_message(
            dev_chat_id,
            text=(
                f"üì© *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
                f"üë§ *{user.full_name}* (@{user.username})\n"
                f"üÜî *ID:* `{user.id}`"
                ),
            parse_mode="Markdown"
        )

        forwarded = await bot.forward_message(dev_chat_id, message.chat.id, message.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        active_dialogs[user.id] = {
            "forwarded_msg_id": forwarded.message_id,
            "user_id": user.id,
            "last_update": datetime.now(),
            "timeout_task": asyncio.Task
        }

        await state.set_state(Communication.chatting)

        await message.answer(
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
            "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–≥–æ."
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.id} —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: {e}")
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await state.clear()


@user_private.message(Communication.chatting, F.content_type == "text")
async def handle_user_followups(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    workflow_data = bot.workflow_data
    dev_chat_id = workflow_data.get('dev_chat_id')

    if user_id not in active_dialogs:
        await message.answer(
            "‚ùó –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üü¢ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=start_dialog
            )
        await state.clear()
        return

    if message.text.lower() == "üî¥ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await state.clear()
        active_dialogs.pop(user_id, None)
        await message.answer("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω", reply_markup=start_dialog)
        return

    try:
        forwarded = await bot.forward_message(dev_chat_id, message.chat.id, message.message_id)
        active_dialogs[user_id] = {
            "forwarded_msg_id": forwarded.message_id,
            "user_id": user_id,
        }
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ.")
