import asyncio
import logging

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta


from filters.chat_types import ChatTypeFilter
from handlers.user_private import active_dialogs
from keyboard.reply import start_dialog

group_router = Router()
group_router.message.filter(ChatTypeFilter(['group', 'supergroup'])) # –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã


async def schedule_dialog_timeout(user_id: int, bot: Bot, state: FSMContext, delay: int = 600):
    logging.info(f"[debug] ‚è±Ô∏è –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è {user_id}")

    await asyncio.sleep(delay)

    dialog = active_dialogs.get(user_id)
    if not dialog:
        return  # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º

    last_update = dialog.get("last_update")

    if last_update is None or datetime.utcnow() - last_update >= timedelta(seconds=delay):
        logging.info(f"[timeout] ‚è≥ –î–∏–∞–ª–æ–≥ —Å user_id={user_id} –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
        await state.clear()
        active_dialogs.pop(user_id, None)

        try:
            await bot.send_message(
                chat_id=user_id,
                text="‚åõ –î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                     "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                     reply_markup=start_dialog
            )

        except Exception as e:
            logging.info(f"[timeout] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    else:
        logging.info(f"[timeout] ‚úÖ –î–∏–∞–ª–æ–≥ —Å user_id={user_id} –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω, —Å–±—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

@group_router.message(F.reply_to_message)
async def reply_to_user_from_dev(message: types.Message, bot: Bot):
    dp: Dispatcher = bot.workflow_data['dp']
    # –ù–∞–π—Ç–∏ user_id –ø–æ forwarded_msg_id
    forwarded_id = message.reply_to_message.message_id

    # –ü–µ—Ä–µ–±—Ä–∞—Ç—å active_dialogs –∏ –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    user_id = None
    for uid, dialog_data in active_dialogs.items():
        if isinstance(dialog_data, dict) and dialog_data.get("forwarded_msg_id") == forwarded_id:
            user_id = dialog_data.get("user_id")
            break

    if user_id is None:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"{message.text}",
            parse_mode="Markdown"
        )

        await bot.set_message_reaction(
            chat_id=message.chat.id,
            message_id=message.reply_to_message.message_id,
            reaction=[types.ReactionTypeEmoji(emoji="üë®‚Äçüíª")]
        )

        dialog = active_dialogs.get(user_id)
        if dialog:
            dialog["last_update"] = datetime.utcnow()

            # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
            old_task: asyncio.Task = dialog.get("timeout_task")
            if old_task and isinstance(old_task, asyncio.Task) and not old_task.done():
                old_task.cancel()

            state: FSMContext = dp.fsm.get_context(bot=bot, chat_id=user_id, user_id=user_id)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
            new_task = asyncio.create_task(schedule_dialog_timeout(user_id=user_id, state=state, bot=bot))
            dialog["timeout_task"] = new_task

    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} {e}")
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")
